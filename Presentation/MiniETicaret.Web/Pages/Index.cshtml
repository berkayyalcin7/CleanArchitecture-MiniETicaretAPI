@page
@model IndexModel
@{
    ViewData["Title"] = "Ana Sayfa";
}

<div aria-live="polite" aria-atomic="true" class="position-relative">
    <div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 11"></div>
</div>

<div class="text-center">
    <h1 class="display-4">Mini E-Ticaret Ürünleri</h1>
    <p>Sayfalama C# (Code-Behind) tarafında yapılıyor.</p>
</div>

@if (Model.DisplayedProducts.Any())
{
    <table class="table table-striped table-hover mt-4">
        <thead class="table-dark">
            <tr>
                <th>Ürün Adı</th>
                <th>Stok</th>
                <th>Fiyat</th>
            </tr>
        </thead>
        <tbody id="productsTableBody">
            @foreach (var product in Model.DisplayedProducts)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Stock</td>
                    <td>@product.Price.ToString("C")</td>
                </tr>
            }
        </tbody>
    </table>

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            @{
                var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
                var nextDisabled = !Model.HasNextPage ? "disabled" : "";
            }

            <li class="page-item @prevDisabled">
                <a class="page-link" asp-page="/Index" asp-route-pageNumber="@(Model.CurrentPage - 1)">Önceki</a>
            </li>

            @if (Model.StartPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" asp-page="/Index" asp-route-pageNumber="1">1</a>
                </li>
                @if (Model.StartPage > 2)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
            }

            @for (var i = Model.StartPage; i <= Model.EndPage; i++)
            {
                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                    <a class="page-link" asp-page="/Index" asp-route-pageNumber="@i">@i</a>
                </li>
            }

            @if (Model.EndPage < Model.TotalPages)
            {
                @if (Model.EndPage < Model.TotalPages - 1)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
                <li class="page-item">
                    <a class="page-link" asp-page="/Index" asp-route-pageNumber="@Model.TotalPages">@Model.TotalPages</a>
                </li>
            }

            <li class="page-item @nextDisabled">
                <a class="page-link" asp-page="/Index" asp-route-pageNumber="@(Model.CurrentPage + 1)">Sonraki</a>
            </li>
        </ul>
    </nav>
}
else
{
    <div class="alert alert-warning mt-4">Gösterilecek ürün bulunamadı.</div>
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js" integrity="sha512-7SRCYIJtR6F8ocwW7UxW6wGKqbSyqREDbfCORCbGLatU0iugBLwyOXpzhkPyHIFdBO0K2VCu57fvP2Twgx1o2A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <style>
        /* Yeni eklenen satıra yumuşak bir giriş animasyonu ekleyelim */
        .new-row {
            animation: fadeIn 0.8s ease-out;
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
                background-color: #d1e7dd; /* Açık yeşil */
            }

            to {
                opacity: 1;
                background-color: transparent;
            }
        }
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // ... (sayfalama ve diğer JavaScript kodlarınız burada kalabilir)

            // --- SignalR Logic ---
            const apiBaseUrl = "https://localhost:7137"; // KENDİ PORTUNUZU YAZIN
            const connection = new signalR.HubConnectionBuilder().withUrl(`${apiBaseUrl}/product-hub`).build();

            // BU KISMI GÜNCELLİYORUZ
            connection.on("ReceiveProductAddedMessage", function (newProduct) {
                console.log("Yeni ürün nesnesi alındı: ", newProduct);

                // 1. Toast bildirimi göster (newProduct.name ile)
                showToast(`Yeni ürün eklendi: ${newProduct.name}`);

                // 2. Tabloya yeni satır ekle
                const tableBody = document.getElementById('productsTableBody');
                if(tableBody){
                    // Yeni satırı tablonun en başına ekle (insertRow(0))
                    const newRow = tableBody.insertRow(0);
                    newRow.classList.add('new-row'); // Animasyon için class ekle

                    // Hücreleri oluştur ve doldur
                    const cellName = newRow.insertCell(0);
                    const cellStock = newRow.insertCell(1);
                    const cellPrice = newRow.insertCell(2);

                    cellName.innerText = newProduct.name;
                    cellStock.innerText = newProduct.stock;
                    // Fiyatı para birimi formatında göster
                    cellPrice.innerText = newProduct.price.toLocaleString('tr-TR', { style: 'currency', currency: 'TRY' });
                }
            });

            connection.start().catch(err => console.error(err.toString()));

            function showToast(message) {
                const toastContainer = document.getElementById('toastContainer');
                const toastId = 'toast-' + new Date().getTime();

                const toastHtml = `
                    <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="toast-header bg-success text-white">
                            <strong class="me-auto"><i class="bi bi-bell-fill"></i> Yeni Bildirim</strong>
                            <small>şimdi</small>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                        <div class="toast-body">
                            ${message}
                        </div>
                    </div>`;

                toastContainer.insertAdjacentHTML('beforeend', toastHtml);
                const toastElement = document.getElementById(toastId);
                const toast = new bootstrap.Toast(toastElement);
                toast.show();
            }
        });
    </script>
}